
import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt 
import seaborn as sns 
from sklearn.datasets import load_diabetes 
from sklearn.model_selecƟon import train_test_split
from sklearn.preprocessing import StandardScaler 
from sklearn.linear_model import LogisƟcRegression
from sklearn.metrics import accuracy_score, classificaƟon_report, confusion_matrix, roc_curve, auc
# Load the diabetes dataset 
diabetes = load_diabetes() 
X, y = diabetes.data, diabetes.target 
# Convert the target variable to binary (1 for diabetes, 0 for no diabetes) 
y_binary = (y > np.median(y)).astype(int) 
# Split the data into training and tesƟng sets
X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=42) 
# Standardize features 
scaler = StandardScaler() 
X_train = scaler.fit_transform(X_train) 
X_test = scaler.transform(X_test) 
# Train the LogisƟc Regression model
model = LogisƟcRegression()
model.fit(X_train, y_train) 
# Evaluate the model 
y_pred = model.predict(X_test) 
accuracy = accuracy_score(y_test, y_pred) 
print("Accuracy: {:.2f}%".format(accuracy * 100)) 
# Evaluate the model 
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred)) 
print("\nClassificaƟon Report:\n", classificaƟon_report(y_test, y_pred))
# Visualize the decision boundary with accuracy informaƟon
plt.figure(figsize=(8, 6)) 
sns.scaƩerplot(x=X_test[:, 2], y=X_test[:, 8], hue=y_test, paleƩe={0: 'blue', 1: 'red'}, marker='o')
plt.xlabel("BMI") 
plt.ylabel("Age") 
plt.Ɵtle("LogisƟc Regression Decision Boundary\nAccuracy: {:.2f}%".format(accuracy * 100)) 
plt.legend(Ɵtle="Diabetes", loc="upper right")
plt.show() 
